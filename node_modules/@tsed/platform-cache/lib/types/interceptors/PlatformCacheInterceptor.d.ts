import { BaseContext, InterceptorContext, InterceptorMethods, InterceptorNext } from "@tsed/di";
import { Logger } from "@tsed/logger";
import { PlatformCachedObject } from "../interfaces/PlatformCachedObject.js";
import { PlatformCacheOptions } from "../interfaces/PlatformCacheOptions.js";
import { PlatformCache } from "../services/PlatformCache.js";
/**
 * @platform
 */
export declare class PlatformCacheInterceptor implements InterceptorMethods {
    protected cache: PlatformCache;
    protected logger: Logger;
    protected prefix: string;
    protected blacklist: string[];
    intercept(context: InterceptorContext<any, PlatformCacheOptions>, next: InterceptorNext): unknown;
    canRefreshInBackground(key: string, { refreshThreshold, ttl }: {
        refreshThreshold?: number;
        ttl: any;
    }, next: Function): Promise<void>;
    cacheMethod(context: InterceptorContext<any, PlatformCacheOptions>, next: InterceptorNext): Promise<any>;
    cacheResponse(context: InterceptorContext<any, PlatformCacheOptions>, next: InterceptorNext): Promise<any>;
    protected getArgs(context: InterceptorContext<unknown, PlatformCacheOptions>): any;
    protected getOptions(context: InterceptorContext<any, PlatformCacheOptions>): {
        key: string;
        refreshThreshold: number | undefined;
        ttl: import("../services/PlatformCache.js").Ttl | undefined;
        type: any;
        args: any;
        collectionType: any;
        keyArgs: string;
        canCache: ((item: any) => boolean) | undefined;
        $ctx: any;
    };
    protected hasKeyInQueue(key: string): Promise<boolean>;
    protected addKeyToQueue(key: string): Promise<void>;
    protected deleteKeyFromQueue(key: string): Promise<void>;
    protected sendResponse(cachedObject: PlatformCachedObject, $ctx: BaseContext): any;
}

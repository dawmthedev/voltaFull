import { Type } from "@tsed/core";
import { Configuration, InjectorService } from "@tsed/di";
import { JsonDeserializerOptions } from "@tsed/json-mapper";
import { Logger } from "@tsed/logger";
import type { Cache, CachingConfig, MultiCache } from "cache-manager";
import { PlatformCacheSettings } from "../interfaces/interfaces.js";
import { PlatformCachedObject } from "../interfaces/PlatformCachedObject.js";
export type CacheManager = Cache | MultiCache;
export type Ttl = number | ((result: any) => number);
/**
 * @platform
 */
export declare class PlatformCache {
    #private;
    protected settings: Configuration;
    protected injector: InjectorService;
    protected logger: Logger;
    get cache(): CacheManager | undefined;
    $onInit(): Promise<void>;
    getKeysOf(target: Type<any>, propertyKey: string | symbol): Promise<string[]>;
    disabled(): boolean;
    defaultKeyResolver(): (args: any[], ctx?: any) => string;
    defaultTtl(): Ttl;
    calculateTTL(result?: any, currentTtl?: Ttl): number;
    ttl(key: string): Promise<void> | Promise<number>;
    wrap<T>(key: string, fetch: () => Promise<T>, ttl?: number): Promise<T>;
    get<T>(key: string, options?: JsonDeserializerOptions): Promise<T | undefined>;
    set<T>(key: string, value: any, options?: CachingConfig<T>): Promise<T | undefined>;
    getCachedObject(key: string): Promise<PlatformCachedObject | undefined>;
    setCachedObject(key: string, data: any, opts: {
        ttl: number;
    } & Record<string, any>): Promise<void>;
    del(key: string): Promise<void>;
    reset(): Promise<void>;
    keys(...args: any[]): Promise<string[]>;
    deleteKeys(patterns: string): Promise<string[]>;
    /**
     * Use micromatch instead native patterns. Use this method if the native store method doesn't support glob patterns
     * @param patterns
     */
    getMatchingKeys(patterns: string): Promise<string[]>;
    deleteMatchingKeys(patterns: string): Promise<string[]>;
    refresh(callback: () => Promise<any> | any): any;
    isForceRefresh(): boolean;
    protected createCacheManager(settings: PlatformCacheSettings): Promise<MultiCache | import("cache-manager").MemoryCache>;
    private mapStore;
}

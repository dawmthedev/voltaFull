{"version":3,"file":"format.js","sourceRoot":"","sources":["../../../../src/browser/utils/format.ts"],"names":[],"mappings":";;;AAAA,SAAgB,MAAM,CAAC,GAAoB,EAAE,GAAG,IAAe;IAC7D,MAAM,EAAE,GAAG,kBAAkB,CAAC;IAE9B,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QAC5B,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,MAAM,QAAQ,GAAG,CAAC,KAAU,EAAE,OAAY,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;YACjE,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YACvB,QAAQ,IAAI,EAAE,CAAC;gBACb,KAAK,GAAG;oBACN,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;wBACvB,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;wBAC1B,MAAM;oBACR,CAAC;gBACH,KAAK,GAAG;oBACN,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;oBACf,MAAM;gBACR,KAAK,GAAG;oBACN,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;oBAClB,MAAM;gBACR,KAAK,GAAG;oBACN,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBAC1B,MAAM;YACV,CAAC;YAED,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,GAAG,CAAC;YACb,CAAC;YAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAClB,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;QAEF,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,oCAAoC;IACpC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,2BAA2B;IAC3B,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAE1C,OAAO,EAAE,GAAG,GAAG,CAAC;AAClB,CAAC;AA/CD,wBA+CC","sourcesContent":["export function format(fmt: string | object, ...args: unknown[]) {\n  const re = /(%?)(%([ojds]))/g;\n\n  if (typeof fmt === \"object\") {\n    fmt = JSON.stringify(fmt, null, 2);\n  }\n\n  if (args.length) {\n    const replacer = (match: any, escaped: any, ptn: any, flag: any) => {\n      let arg = args.shift();\n      switch (flag) {\n        case \"o\":\n          if (Array.isArray(arg)) {\n            arg = JSON.stringify(arg);\n            break;\n          }\n        case \"s\":\n          arg = \"\" + arg;\n          break;\n        case \"d\":\n          arg = Number(arg);\n          break;\n        case \"j\":\n          arg = JSON.stringify(arg);\n          break;\n      }\n\n      if (!escaped) {\n        return arg;\n      }\n\n      args.unshift(arg);\n      return match;\n    };\n\n    fmt = String(fmt).replace(re, replacer);\n  }\n\n  // arguments remain after formatting\n  if (args.length) {\n    fmt += \" \" + args.join(\" \");\n  }\n\n  // update escaped %% values\n  fmt = String(fmt).replace(/%{2,2}/g, \"%\");\n\n  return \"\" + fmt;\n}\n"]}
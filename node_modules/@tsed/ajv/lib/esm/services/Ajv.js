import { cleanObject } from "@tsed/core";
import { Configuration, InjectorService, ProviderScope, registerProvider } from "@tsed/di";
import Ajv from "ajv";
import AjvErrors from "ajv-errors";
import AjvFormats from "ajv-formats";
function getHandler(key, service) {
    if (service[key]) {
        return service[key].bind(service);
    }
}
function getKeywordProviders(injector) {
    return injector.getProviders("ajv:keyword");
}
function bindKeywords(injector) {
    return getKeywordProviders(injector).map((provider) => {
        const options = provider.store.get("ajv:keyword", {});
        const service = injector.invoke(provider.token);
        return cleanObject({
            coerceTypes: "array",
            ...options,
            validate: getHandler("validate", service),
            compile: getHandler("compile", service),
            code: getHandler("code", service),
            macro: getHandler("macro", service)
        });
    });
}
function getFormatsProviders(injector) {
    return injector.getProviders("ajv:formats");
}
function getFormats(injector) {
    return getFormatsProviders(injector).map((provider) => {
        const { name, options } = provider.store.get("ajv:formats", {});
        const service = injector.invoke(provider.token);
        return {
            name,
            options: {
                ...options,
                validate: service.validate.bind(service),
                compare: service.compare?.bind(service)
            }
        };
    });
}
registerProvider({
    provide: Ajv,
    deps: [Configuration, InjectorService],
    scope: ProviderScope.SINGLETON,
    useFactory(configuration, injector) {
        const { errorFormatter, keywords = [], ...props } = configuration.get("ajv") || {};
        const options = {
            verbose: false,
            coerceTypes: true,
            strict: false,
            keywords: [...keywords, ...bindKeywords(injector)],
            discriminator: true,
            allErrors: true,
            ...props
        };
        const ajv = new Ajv(options);
        // add support for custom error messages
        AjvErrors(ajv);
        AjvFormats(ajv);
        getFormats(injector).forEach(({ name, options }) => {
            ajv.addFormat(name, options);
        });
        return ajv;
    }
});
//# sourceMappingURL=Ajv.js.map
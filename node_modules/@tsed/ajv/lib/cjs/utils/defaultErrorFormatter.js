"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultErrorFormatter = void 0;
const getPath_js_1 = require("./getPath.js");
function defaultErrorFormatter(error) {
    const value = JSON.stringify(error.data === undefined ? "undefined" : error.data);
    const join = (list) => list.filter(Boolean).join("").trim();
    const [, indexPath, ...paths] = (0, getPath_js_1.getInstancePath)(error).split(".");
    const deepPaths = paths.length ? "." + paths.join(".") : "";
    error.dataPath = (0, getPath_js_1.getPath)(error);
    if (error.collectionName) {
        const modelName = error.modelName || "";
        switch (error.collectionName) {
            case "Array":
                return join([`${modelName}[${indexPath}]${deepPaths}`, ` ${error.message}. Given value: ${value}`]);
            case "Map":
                return join([`Map<${indexPath}, ${modelName}>${deepPaths}`, ` ${error.message}. Given value: ${value}`]);
            case "Set":
                return join([`Set<${indexPath}, ${modelName}>${deepPaths}`, ` ${error.message}. Given value: ${value}`]);
        }
    }
    return join([
        !error.modelName && "Value",
        `${error.modelName || ""}`,
        (!error?.params?.missingProperty && error.dataPath) ||
            (error?.params?.missingProperty && (error.instancePath || "").replace(/\//g, ".")),
        ` ${error.message}. Given value: ${value}`
    ]);
}
exports.defaultErrorFormatter = defaultErrorFormatter;
//# sourceMappingURL=defaultErrorFormatter.js.map
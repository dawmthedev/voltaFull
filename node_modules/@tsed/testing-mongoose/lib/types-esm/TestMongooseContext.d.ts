import { PlatformTest } from "@tsed/common";
import { MongoMemoryReplSet, MongoMemoryServer } from "mongodb-memory-server";
import { type MongoMemoryReplSetOpts } from "mongodb-memory-server-core/lib/MongoMemoryReplSet";
import { type MongoMemoryServerOpts } from "mongodb-memory-server-core/lib/MongoMemoryServer";
type ReplSetCreateOpts = {
    replicaSet: true;
} & Partial<MongoMemoryReplSetOpts>;
type MemoryServerCreateOpts = {
    replicaSet?: false;
} & MongoMemoryServerOpts;
type CreateOpts = ReplSetCreateOpts | MemoryServerCreateOpts;
export declare class TestMongooseContext extends PlatformTest {
    static getMongo(): MongoMemoryServer | MongoMemoryReplSet;
    static install({ replicaSet, ...opts }?: CreateOpts): Promise<any>;
    /**
     * Connect to the in-memory database.
     */
    static bootstrap(mod: any, options?: Partial<TsED.Configuration> & {
        mongod?: CreateOpts;
    }): () => Promise<void>;
    static create(options?: Partial<TsED.Configuration> & {
        mongod?: CreateOpts;
    }): Promise<void>;
    /**
     * Resets the test injector of the test context, so it won't pollute your next test. Call this in your `tearDown` logic.
     */
    static reset(): Promise<void>;
    /**
     *
     */
    static clearDatabase(): Promise<void>;
    static getMongooseOptions(): Promise<any>;
}
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.channelsMapper = void 0;
const change_case_1 = require("change-case");
const OperationVerbs_js_1 = require("../../constants/OperationVerbs.js");
const JsonSchemaMapperContainer_js_1 = require("../../registries/JsonSchemaMapperContainer.js");
const buildPath_js_1 = require("../../utils/buildPath.js");
const getJsonEntityStore_js_1 = require("../../utils/getJsonEntityStore.js");
const getOperationsStores_js_1 = require("../../utils/getOperationsStores.js");
const removeHiddenOperation_js_1 = require("../../utils/removeHiddenOperation.js");
const ALLOWED_VERBS = [OperationVerbs_js_1.OperationVerbs.PUBLISH, OperationVerbs_js_1.OperationVerbs.SUBSCRIBE];
function pushToChannels(options) {
    return (channels, { operationPath, operationStore }) => {
        const path = options.ctrlRootPath || "/";
        const method = operationPath.method.toLowerCase();
        const operationId = (0, change_case_1.camelCase)(`${method.toLowerCase()} ${operationStore.parent.schema.getName()}`);
        const message = (0, JsonSchemaMapperContainer_js_1.execMapper)("message", [operationStore, operationPath], options);
        return {
            ...channels,
            [path]: {
                ...channels[path],
                [method]: {
                    ...channels[path]?.[method],
                    operationId,
                    message: {
                        oneOf: [...(channels[path]?.[method]?.message?.oneOf || []), message]
                    }
                }
            }
        };
    };
}
function expandOperationPaths(options) {
    return (operationStore) => {
        const operationPaths = operationStore.operation.getAllowedOperationPath(ALLOWED_VERBS);
        if (operationPaths.length === 0) {
            return [];
        }
        return operationPaths.map((operationPath) => {
            return {
                operationPath,
                operationStore
            };
        });
    };
}
function channelsMapper(model, { channels, rootPath, ...options }) {
    const store = (0, getJsonEntityStore_js_1.getJsonEntityStore)(model);
    const ctrlPath = store.path;
    const ctrlRootPath = (0, buildPath_js_1.buildPath)(rootPath + ctrlPath);
    options = {
        ...options,
        ctrlRootPath
    };
    return [...(0, getOperationsStores_js_1.getOperationsStores)(model).values()]
        .filter(removeHiddenOperation_js_1.removeHiddenOperation)
        .flatMap(expandOperationPaths(options))
        .reduce(pushToChannels(options), channels);
}
exports.channelsMapper = channelsMapper;
(0, JsonSchemaMapperContainer_js_1.registerJsonSchemaMapper)("channels", channelsMapper);
//# sourceMappingURL=channelsMapper.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.responsePayloadMapper = void 0;
const core_1 = require("@tsed/core");
const change_case_1 = require("change-case");
const SpecTypes_js_1 = require("../../domain/SpecTypes.js");
const JsonSchemaMapperContainer_js_1 = require("../../registries/JsonSchemaMapperContainer.js");
const somethingOf_js_1 = require("../../utils/somethingOf.js");
function responsePayloadMapper(jsonOperationStore, operationPath, options) {
    const responses = jsonOperationStore.operation.getResponses();
    const statuses = [];
    const statusesTexts = [];
    const successSchemes = [];
    const errorSchemes = [];
    [...responses.entries()].forEach(([status, jsonResponse]) => {
        const response = (0, JsonSchemaMapperContainer_js_1.execMapper)("map", [jsonResponse], options);
        statuses.push(+status);
        statusesTexts.push(response.description);
        if (+status !== 204) {
            const { content } = response;
            const schema = content[Object.keys(content)[0]];
            if (+status >= 200 && +status < 400) {
                successSchemes.push(schema);
            }
            else {
                successSchemes.push(schema);
            }
        }
    });
    const responsePayloadName = (0, change_case_1.pascalCase)([operationPath.path, operationPath.method, "Response"].join(" "));
    const responsePayload = {
        type: "object",
        properties: {
            status: {
                type: "number",
                enum: statuses
            },
            statusText: {
                type: "string",
                enum: statusesTexts
            }
        },
        required: ["status"]
    };
    const dataSchema = (0, somethingOf_js_1.makeOf)("oneOf", successSchemes);
    if (dataSchema) {
        (0, core_1.setValue)(responsePayload, "properties.data", dataSchema);
    }
    const errorSchema = (0, somethingOf_js_1.makeOf)("oneOf", errorSchemes);
    if (errorSchemes.length) {
        (0, core_1.setValue)(responsePayload, "properties.error", errorSchema);
    }
    (0, core_1.setValue)(options, `components.schemas.${responsePayloadName}`, responsePayload);
    return { $ref: `#/components/schemas/${responsePayloadName}` };
}
exports.responsePayloadMapper = responsePayloadMapper;
(0, JsonSchemaMapperContainer_js_1.registerJsonSchemaMapper)("response", responsePayloadMapper, SpecTypes_js_1.SpecTypes.ASYNCAPI);
//# sourceMappingURL=responseMapper.js.map
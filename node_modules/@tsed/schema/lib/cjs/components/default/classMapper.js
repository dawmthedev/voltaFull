"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.classMapper = void 0;
const core_1 = require("@tsed/core");
const JsonEntityStore_js_1 = require("../../domain/JsonEntityStore.js");
const JsonSchemaMapperContainer_js_1 = require("../../registries/JsonSchemaMapperContainer.js");
const generics_js_1 = require("../../utils/generics.js");
const ref_js_1 = require("../../utils/ref.js");
function classMapper(value, options) {
    const store = JsonEntityStore_js_1.JsonEntityStore.from(value.class);
    const name = (0, ref_js_1.createRefName)(store.schema.getName() || value.getName(), options);
    if (value.hasGenerics) {
        // Inline generic
        const { type, properties, additionalProperties, items, ...props } = value.toJSON(options);
        const schema = {
            ...(0, JsonSchemaMapperContainer_js_1.execMapper)("any", [store.schema], {
                ...options,
                ...(0, generics_js_1.popGenerics)(value),
                root: false
            }),
            ...props
        };
        if (schema.title) {
            const name = (0, ref_js_1.createRefName)(schema.title, options);
            (0, core_1.setValue)(options.components, `schemas.${name}`, schema);
            delete schema.title;
            return (0, ref_js_1.createRef)(name, value, options);
        }
        return schema;
    }
    if (!(0, core_1.getValue)(options, `components.schemas.${name}`)) {
        // avoid infinite calls
        (0, core_1.setValue)(options, `components.schemas.${name}`, {});
        options.components.schemas[name] = (0, JsonSchemaMapperContainer_js_1.execMapper)("any", [store.schema], (0, generics_js_1.mapGenericsOptions)({
            ...options,
            root: false
        }));
    }
    return (0, ref_js_1.createRef)(name, value, options);
}
exports.classMapper = classMapper;
(0, JsonSchemaMapperContainer_js_1.registerJsonSchemaMapper)("class", classMapper);
//# sourceMappingURL=classMapper.js.map
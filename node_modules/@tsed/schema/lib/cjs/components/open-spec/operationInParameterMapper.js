"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationInParameterMapper = void 0;
const change_case_1 = require("change-case");
const JsonParameterTypes_js_1 = require("../../domain/JsonParameterTypes.js");
const JsonSchemaMapperContainer_js_1 = require("../../registries/JsonSchemaMapperContainer.js");
const generics_js_1 = require("../../utils/generics.js");
function mapOptions(parameter, options = {}) {
    return {
        ...options,
        groups: parameter.groups,
        groupsName: parameter.groupsName
    };
}
function operationInParameterMapper(jsonParameter, opts) {
    const options = mapOptions(jsonParameter, opts);
    const schemas = { ...(options.components?.schemas || {}) };
    const { type, schema, ...parameter } = (0, JsonSchemaMapperContainer_js_1.execMapper)("map", [jsonParameter], options);
    const jsonSchema = (0, JsonSchemaMapperContainer_js_1.execMapper)("item", [jsonParameter.$schema], {
        ...options,
        ...(0, generics_js_1.popGenerics)(jsonParameter)
    });
    parameter.required = parameter.required || jsonParameter.get("in") === JsonParameterTypes_js_1.JsonParameterTypes.PATH;
    const paramOpts = {
        ...options,
        jsonSchema,
        jsonParameter,
        oldSchemas: schemas
    };
    const mapperName = (0, change_case_1.camelCase)(`operationIn ${jsonParameter.get("in")}`);
    if ((0, JsonSchemaMapperContainer_js_1.hasMapper)(mapperName)) {
        return (0, JsonSchemaMapperContainer_js_1.execMapper)(mapperName, [parameter], paramOpts);
    }
    parameter.schema = jsonSchema;
    return parameter;
}
exports.operationInParameterMapper = operationInParameterMapper;
(0, JsonSchemaMapperContainer_js_1.registerJsonSchemaMapper)("operationInParameter", operationInParameterMapper);
//# sourceMappingURL=operationInParameterMapper.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InFile = void 0;
const core_1 = require("@tsed/core");
const in_js_1 = require("./in.js");
const JsonParameterTypes_js_1 = require("../../domain/JsonParameterTypes.js");
const returns_js_1 = require("./returns.js");
const name_js_1 = require("../common/name.js");
const consumes_js_1 = require("./consumes.js");
/**
 * Add a input file parameter.
 *
 * ::: warning
 * Don't use decorator with Ts.ED application to decorate parameters. Use @@BodyParams@@, @@PathParams@@, etc... instead.
 * But you can use this decorator on Method, to add extra in parameters like Authorization header.
 *
 * ```typescript
 * @Controller("/")
 * class MyController {
 *    @Post("/")
 *    method(@InFile("file1") file: any) {
 *    }
 *  }
 * ```
 * :::
 *
 * @decorator
 * @swagger
 * @schema
 * @input
 * @operation
 * @param name
 */
function InFile(name) {
    return (...args) => {
        const [target, propertyKey, index] = args;
        const multiple = core_1.Metadata.getParamTypes(target, propertyKey)[index] === Array;
        name = (typeof name === "object" ? undefined : name);
        const expression = [name, !multiple && "0"].filter(Boolean).join(".");
        const decorators = (0, core_1.useDecorators)((0, in_js_1.In)(JsonParameterTypes_js_1.JsonParameterTypes.FILES), (0, name_js_1.Name)(expression), (0, core_1.useMethodDecorators)((0, returns_js_1.Returns)(400).Description(`<File too long | Too many parts | Too many files | Field name too long | Field value too long | Too many fields | Unexpected field>  [fieldName] Example: File too long file1`), (0, consumes_js_1.Consumes)("multipart/form-data")));
        decorators(...args);
    };
}
exports.InFile = InFile;
//# sourceMappingURL=inFile.js.map
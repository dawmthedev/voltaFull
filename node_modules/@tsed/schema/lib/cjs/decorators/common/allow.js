"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Allow = void 0;
const core_1 = require("@tsed/core");
const jsonEntityFn_js_1 = require("./jsonEntityFn.js");
const property_js_1 = require("./property.js");
/**
 * Add allowed values when the property or parameters is required.
 *
 * #### Example on parameter:
 *
 * ```typescript
 * @Post("/")
 * async method(@Allow("") @BodyParams("field") field: string) {}
 * ```
 * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.
 *
 * #### Example on model:
 *
 * ```typescript
 * class Model {
 *   @Allow("")
 *   field: string;
 * }
 * ```
 *
 * @returns {Function}
 * @decorator
 * @validation
 * @swagger
 * @schema
 * @input
 */
function Allow(...values) {
    const model = values.find((item) => (0, core_1.isClass)(item));
    return (0, core_1.useDecorators)(model && (0, property_js_1.Property)(model), (0, jsonEntityFn_js_1.JsonEntityFn)((store, args) => {
        if (store.decoratorType === core_1.DecoratorTypes.PARAM) {
            store.required = true;
        }
        if (store.decoratorType === core_1.DecoratorTypes.PROP) {
            store.parentSchema.addRequired(store.propertyName);
        }
        store.schema.allow(...values);
    }));
}
exports.Allow = Allow;
//# sourceMappingURL=allow.js.map
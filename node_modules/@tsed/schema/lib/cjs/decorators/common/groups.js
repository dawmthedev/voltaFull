"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Groups = void 0;
const core_1 = require("@tsed/core");
const matchGroups_js_1 = require("../../utils/matchGroups.js");
const customKey_js_1 = require("./customKey.js");
const jsonEntityFn_js_1 = require("./jsonEntityFn.js");
/**
 * @ignore
 */
function groupsClass(groups, entity) {
    const entries = Object.entries(groups[0]);
    entity.children.forEach((propEntity) => {
        const groups = entries.filter(([, props]) => props.includes(propEntity.propertyName)).map(([key]) => key);
        const decorator = Groups(...groups);
        decorator(propEntity.target, propEntity.propertyKey);
    });
}
function Groups(...groups) {
    return (0, jsonEntityFn_js_1.JsonEntityFn)((entity) => {
        switch (entity.decoratorType) {
            case core_1.DecoratorTypes.CLASS:
                groupsClass(groups, entity);
                break;
            case core_1.DecoratorTypes.PROP:
                (0, customKey_js_1.CustomKey)("x-groups", groups)(entity.target, entity.propertyKey);
                entity.schema.$hooks.on("groups", (prev, givenGroups) => {
                    if (!prev) {
                        if ((0, matchGroups_js_1.matchGroups)(groups, givenGroups)) {
                            return true;
                        }
                    }
                    return prev;
                });
                break;
            case core_1.DecoratorTypes.PARAM:
                let groupsName = "";
                if (groups.length == 2 && (0, core_1.isArray)(groups[1])) {
                    groupsName = groups[0];
                    groups = groups[1];
                }
                entity.parameter.groups = groups;
                entity.parameter.groupsName = groupsName;
                break;
        }
    });
}
exports.Groups = Groups;
//# sourceMappingURL=groups.js.map
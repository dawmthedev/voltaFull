"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Required = void 0;
const withErrorMsg_js_1 = require("../../utils/withErrorMsg.js");
const allow_js_1 = require("./allow.js");
const optional_js_1 = require("./optional.js");
/**
 * Add required annotation on Property or Parameter.
 *
 * The @@Required@@ decorator can be used on two cases.
 *
 * To decorate a parameters:
 *
 * ```typescript
 * @Post("/")
 * async method(@Required() @BodyParams("field") field: string) {}
 * ```
 *
 * To decorate a model:
 *
 * ```typescript
 * class Model {
 *   @Required()
 *   field: string;
 * }
 * ```
 *
 * ::: tip
 * Required will throw a BadRequest when the given value is `null`, an empty string or `undefined`.
 * :::
 *
 * ### Allow values
 *
 * In some case, you didn't want trigger a BadRequest when the value is an empty string for example.
 * The decorator `@Allow()`, allow you to configure a value list for which there will be no exception.
 *
 * ```typescript
 * class Model {
 *   @Allow("") // add automatically required flag
 *   field: string;
 * }
 * ```
 *
 * @decorator
 * @validation
 * @swagger
 * @schema
 * @input
 */
exports.Required = (0, withErrorMsg_js_1.withErrorMsg)("required", (required = true, ...allowedRequiredValues) => {
    return required ? (0, allow_js_1.Allow)(...allowedRequiredValues) : (0, optional_js_1.Optional)();
});
//# sourceMappingURL=required.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSpec = void 0;
const core_1 = require("@tsed/core");
const SpecTypes_js_1 = require("../domain/SpecTypes.js");
const JsonSchemaMapperContainer_js_1 = require("../registries/JsonSchemaMapperContainer.js");
const getJsonEntityStore_js_1 = require("./getJsonEntityStore.js");
const mergeSpec_js_1 = require("./mergeSpec.js");
const operationIdFormatter_js_1 = require("./operationIdFormatter.js");
/**
 * @ignore
 */
const caches = new Map();
/**
 * @ignore
 */
function get(model, options, cb) {
    if (!caches.has(model)) {
        caches.set(model, new Map());
    }
    const cache = caches.get(model);
    const key = JSON.stringify(options);
    if (!cache.has(key)) {
        cache.set(key, cb());
    }
    return cache.get(key);
}
function generate(model, options) {
    const store = (0, getJsonEntityStore_js_1.getJsonEntityStore)(model);
    const { rootPath = "/" } = options;
    options = {
        ...options,
        rootPath,
        defaultTags: [
            (0, core_1.cleanObject)({
                name: store.schema.getName(),
                description: store.schema.get("description")
            })
        ]
    };
    return (0, JsonSchemaMapperContainer_js_1.execMapper)("generate", [store], options);
}
/**
 * Return the swagger or open spec for the given class.
 * @param model
 * @param options
 */
function getSpec(model, options = {}) {
    options = {
        specType: SpecTypes_js_1.SpecTypes.OPENAPI,
        ...options,
        tags: [],
        paths: {},
        channels: {},
        components: {},
        operationIdFormatter: options.operationIdFormatter || (0, operationIdFormatter_js_1.operationIdFormatter)(options.operationIdPattern),
        root: false
    };
    if ((0, core_1.isArray)(model)) {
        let finalSpec = {};
        options = {
            ...options,
            append(spec) {
                finalSpec = (0, mergeSpec_js_1.mergeSpec)(finalSpec, spec);
            }
        };
        model.forEach(({ token, ...opts }) => {
            const spec = getSpec(token, {
                ...options,
                ...opts
            });
            options.append(spec);
        });
        return finalSpec;
    }
    return get(model, options, () => generate(model, options));
}
exports.getSpec = getSpec;
//# sourceMappingURL=getSpec.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformContext = void 0;
const di_1 = require("@tsed/di");
const PlatformApplication_js_1 = require("../services/PlatformApplication.js");
const PlatformRequest_js_1 = require("../services/PlatformRequest.js");
const PlatformResponse_js_1 = require("../services/PlatformResponse.js");
class PlatformContext extends di_1.DIContext {
    #isFinished;
    constructor(options) {
        super(options);
        this.PLATFORM = "WWW";
        this.#isFinished = false;
        options.endpoint && (this.endpoint = options.endpoint);
        this.event = options.event;
        this.response = new (options.ResponseKlass || PlatformResponse_js_1.PlatformResponse)(this);
        this.request = new (options.RequestKlass || PlatformRequest_js_1.PlatformRequest)(this);
        this.request.request.$ctx = this;
        this.request.request.id = this.id;
        this.response.setHeader("x-request-id", this.id);
    }
    get url() {
        return this.request.url;
    }
    get app() {
        return this.injector.get(PlatformApplication_js_1.PlatformApplication);
    }
    start() {
        return this.emit("$onRequest", this);
    }
    async finish() {
        await Promise.all([this.emit("$onResponse", this), this.destroy()]);
        this.#isFinished = true;
    }
    isFinished() {
        return this.#isFinished;
    }
    isDone() {
        return this.request?.isAborted() || this.response?.isDone() || this.isFinished();
    }
    /**
     * Return the framework request instance (Express, Koa, etc...)
     */
    getRequest() {
        return this.request.getRequest();
    }
    /**
     * Return the framework response instance (Express, Koa, etc...)
     */
    getResponse() {
        return this.response.getResponse();
    }
    /**
     * Get Node.js request
     */
    getReq() {
        return this.request.getReq();
    }
    /**
     * Get Node.js response
     */
    getRes() {
        return this.response.getRes();
    }
    /**
     * Return the original application instance.
     */
    getApp() {
        return this.app.getApp();
    }
}
exports.PlatformContext = PlatformContext;
//# sourceMappingURL=PlatformContext.js.map
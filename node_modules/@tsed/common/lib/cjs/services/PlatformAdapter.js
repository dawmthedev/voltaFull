"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeAdapter = exports.PlatformAdapter = void 0;
const di_1 = require("@tsed/di");
const createHttpServer_js_1 = require("../utils/createHttpServer.js");
const createHttpsServer_js_1 = require("../utils/createHttpsServer.js");
class PlatformAdapter {
    constructor(injector) {
        this.injector = injector;
    }
    get app() {
        return this.injector.get("PlatformApplication");
    }
    getServers() {
        return [(0, createHttpServer_js_1.createHttpServer)(this.injector, this.app.callback()), (0, createHttpsServer_js_1.createHttpsServer)(this.injector, this.app.callback())].filter(Boolean);
    }
    onInit() {
        return Promise.resolve();
    }
    beforeLoadRoutes() {
        return Promise.resolve();
    }
    afterLoadRoutes() {
        return Promise.resolve();
    }
}
exports.PlatformAdapter = PlatformAdapter;
class FakeAdapter extends PlatformAdapter {
    constructor() {
        super(...arguments);
        this.providers = [];
    }
    static { this.NAME = "FAKE_ADAPTER"; }
    static createFakeRawDriver() {
        // istanbul ignore next
        function FakeRawDriver() { }
        // istanbul ignore next
        function use() {
            return this;
        }
        FakeRawDriver.use = use;
        FakeRawDriver.all = use;
        FakeRawDriver.get = use;
        FakeRawDriver.patch = use;
        FakeRawDriver.post = use;
        FakeRawDriver.put = use;
        FakeRawDriver.head = use;
        FakeRawDriver.delete = use;
        FakeRawDriver.options = use;
        return FakeRawDriver;
    }
    createApp() {
        const app = FakeAdapter.createFakeRawDriver();
        return {
            app,
            callback() {
                return app;
            }
        };
    }
    multipart(options) {
        return {};
    }
    statics(endpoint, options) {
        return {};
    }
    bodyParser(type) {
        return () => { };
    }
    mapLayers(layers) { }
    mapHandler(handler) {
        return handler;
    }
    useContext() { }
}
exports.FakeAdapter = FakeAdapter;
(0, di_1.registerProvider)({
    provide: PlatformAdapter,
    deps: [di_1.InjectorService],
    useClass: FakeAdapter
});
//# sourceMappingURL=PlatformAdapter.js.map
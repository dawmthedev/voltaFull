"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createModel = exports.getModelToken = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const schema_1 = require("@tsed/schema");
const mongoose_1 = tslib_1.__importDefault(require("mongoose"));
const constants_js_1 = require("../constants/constants.js");
const MongooseModels_js_1 = require("../registries/MongooseModels.js");
const createSchema_js_1 = require("./createSchema.js");
function getModelToken(target, options) {
    const { collectionName, token } = (0, createSchema_js_1.getSchemaToken)(target, options);
    core_1.Store.from(target).set(constants_js_1.MONGOOSE_MODEL_NAME, collectionName);
    MongooseModels_js_1.MongooseModels.set(collectionName, target);
    return { token, collectionName };
}
exports.getModelToken = getModelToken;
/**
 * Create an instance of mongoose.model from a class.
 *
 * @param {Type<any>} target Class attached to the schema and model.
 * @param {"mongoose".Schema} schema Schema that will be attached to the model.
 * @param name model name
 * @param collection (optional, induced from model name)
 * @param overwriteModels
 * @param connection
 * @returns {Model<T extends Document>}
 */
function createModel(target, schema, name = (0, core_1.nameOf)(target), collection, overwriteModels, connection) {
    const entity = schema_1.JsonEntityStore.from(target);
    if (entity.isDiscriminatorChild) {
        const discriminatorName = entity.discriminatorAncestor.schema.discriminator().getDefaultValue(target);
        const ancestorModel = entity.discriminatorAncestor.get(constants_js_1.MONGOOSE_MODEL);
        // check if discriminator is already registered on model before creating it
        return ancestorModel.discriminators?.[discriminatorName] || ancestorModel.discriminator(discriminatorName, schema);
    }
    const opts = overwriteModels ? { overwriteModels } : undefined;
    const c = connection || mongoose_1.default;
    const model = c.model(name, schema, collection, opts);
    core_1.Store.from(target).set(constants_js_1.MONGOOSE_MODEL, model);
    return model;
}
exports.createModel = createModel;
//# sourceMappingURL=createModel.js.map
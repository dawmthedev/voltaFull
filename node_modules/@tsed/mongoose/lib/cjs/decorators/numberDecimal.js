"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberDecimal = exports.DecimalFormat = void 0;
const tslib_1 = require("tslib");
const ajv_1 = require("@tsed/ajv");
const core_1 = require("@tsed/core");
const json_mapper_1 = require("@tsed/json-mapper");
const schema_1 = require("@tsed/schema");
const mongoose_1 = require("mongoose");
const constants_js_1 = require("../constants/constants.js");
let DecimalFormat = class DecimalFormat {
    validate(num) {
        return (0, core_1.isString)(num) || (0, core_1.isNumber)(num);
    }
};
DecimalFormat = tslib_1.__decorate([
    (0, ajv_1.Formats)("decimal", { type: "number" })
], DecimalFormat);
exports.DecimalFormat = DecimalFormat;
function isDecimal(value) {
    return value && value._bsontype === "Decimal128";
}
/**
 * Tell Mongoose whether to define an Decimal128 property.
 * Will be serialized as `number` with format as `decimal`.
 * ### Example
 *
 * ```typescript
 * @Model()
 * export class PriceModel {
 *   @NumberDecimal()
 *   price: Decimal128;
 * }
 * ```
 * Optionally using custom decimal type, such as `Big` from big.js
 * ```typescript
 * @Model()
 * export class PriceModel {
 *   @NumberDecimal(Big)
 *   price: Big;
 * }
 * ```
 * @param type Optional decimal type constructor
 * @decorator
 * @mongoose
 * @schema
 */
function NumberDecimal(type) {
    const schema = {
        type: mongoose_1.Schema.Types.Decimal128
    };
    if (type) {
        // Define property getter to convert Decimal128 to custom type
        schema.get = (value) => {
            return isDecimal(value) ? new type(value) : value;
        };
    }
    return (0, core_1.useDecorators)((0, schema_1.Property)(Number), (0, schema_1.Format)("decimal"), (0, schema_1.Example)(12.34), (0, core_1.StoreMerge)(constants_js_1.MONGOOSE_SCHEMA, schema), 
    // Deserialize number value from JSON to Decimal128
    (0, json_mapper_1.OnDeserialize)((value) => {
        if (value === undefined) {
            return undefined;
        }
        if (type) {
            return new type(value);
        }
        if ((0, core_1.isString)(value)) {
            return mongoose_1.Types.Decimal128.fromString(value);
        }
        return mongoose_1.Types.Decimal128.fromString(`${value}`);
    }), 
    // Serialize decimal value to floating point number
    (0, json_mapper_1.OnSerialize)((value, ctx) => {
        return value && Number(value);
    }));
}
exports.NumberDecimal = NumberDecimal;
//# sourceMappingURL=numberDecimal.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicRef = void 0;
const core_1 = require("@tsed/core");
const schema_1 = require("@tsed/schema");
const mongoose_1 = require("mongoose");
const constants_js_1 = require("../constants/constants.js");
const json_mapper_1 = require("@tsed/json-mapper");
const MongooseModels_js_1 = require("../registries/MongooseModels.js");
function isRef(value) {
    return (value && value._bsontype) || (0, core_1.isString)(value);
}
function getType(refPath, ctx) {
    return (ctx?.self[refPath] && MongooseModels_js_1.MongooseModels.get(ctx.self[refPath])) || Object;
}
/**
 * Define a property as mongoose reference to other Model (decorated with @Model).
 *
 * ### Example
 *
 * ```typescript
 * @Model()
 * class FooModel {
 *
 *    @DynamicRef('type')
 *    field: DynamicRef<OtherFooModel | OtherModel>
 *
 *    @Enum(['OtherFooModel', 'OtherModel'])
 *    type: string
 * }
 *
 * @Model()
 * class OtherFooModel {
 * }
 *
 * @Model()
 * class OtherModel {
 * }
 * ```
 *
 * @param refPath {String} the path to apply the correct model
 * @param types {Type} the classes to generate the correct json schema
 * @returns {Function}
 * @decorator
 * @mongoose
 * @property
 */
function DynamicRef(refPath, ...types) {
    return (0, core_1.useDecorators)((0, schema_1.Property)(Object), (0, schema_1.Example)("5ce7ad3028890bd71749d477"), (0, schema_1.Description)("A reference ObjectID"), (0, core_1.StoreMerge)(constants_js_1.MONGOOSE_SCHEMA, {
        type: mongoose_1.Schema.Types.ObjectId,
        refPath
    }), (0, json_mapper_1.OnDeserialize)((value, ctx) => {
        if (isRef(value)) {
            return value.toString();
        }
        return (0, json_mapper_1.deserialize)(value, { ...ctx, type: getType(refPath, ctx) });
    }), (0, json_mapper_1.OnSerialize)((value, ctx) => {
        if (isRef(value)) {
            return value.toString();
        }
        return (0, json_mapper_1.serialize)(value, { ...ctx, type: getType(refPath, ctx) });
    }), (0, schema_1.OneOf)((0, schema_1.string)().example("5ce7ad3028890bd71749d477").description("A reference ObjectID"), ...types));
}
exports.DynamicRef = DynamicRef;
//# sourceMappingURL=dynamicRef.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = void 0;
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const schema_1 = require("@tsed/schema");
const MongooseConnections_js_1 = require("../services/MongooseConnections.js");
const createModel_js_1 = require("../utils/createModel.js");
const createSchema_js_1 = require("../utils/createSchema.js");
const schemaOptions_js_1 = require("../utils/schemaOptions.js");
/**
 * Define a class as a Mongoose Model. The model can be injected to the Service, Controller, Middleware, Converters or Filter with
 * `@Inject` annotation.
 *
 * ### Example
 *
 * ```typescript
 * @Model()
 * export class EventModel {
 *   @Property()
 *   field: string;
 * }
 * ```
 *
 * Then inject the model into a service:
 *
 * ```typescript
 * class MyService {
 *    constructor(@Inject(EventModel) eventModel: MongooseModel<EventModel>) {
 *        eventModel.findById().exec();
 *    }
 * }
 * ```
 *
 * ### Options
 *
 * - `schemaOptions` (mongoose.SchemaOptions): Option to configure the schema behavior.
 * - `name` (String): model name.
 * - `collection` (String): collection (optional, induced from model name).
 * - `skipInit` (Boolean): skipInit whether to skip initialization (defaults to false).
 *
 * @param {MongooseModelOptions} options
 * @returns {(target: any) => void}
 * @decorator
 * @mongoose
 * @class
 */
function Model(options = {}) {
    return (0, core_1.useDecorators)((target) => {
        const { token, collectionName } = (0, createModel_js_1.getModelToken)(target, options);
        options.discriminatorValue && (0, schema_1.DiscriminatorValue)(options.discriminatorValue)(target);
        (0, di_1.registerProvider)({
            provide: token,
            deps: [],
            useFactory() {
                return (0, createSchema_js_1.getSchema)(target, options);
            }
        });
        (0, di_1.registerProvider)({
            provide: target,
            type: "mongoose:model",
            deps: [MongooseConnections_js_1.MONGOOSE_CONNECTIONS, token],
            useFactory(connections, schema) {
                (0, schemaOptions_js_1.applySchemaOptions)(schema, (0, schemaOptions_js_1.schemaOptions)(target));
                return (0, createModel_js_1.createModel)(target, schema, collectionName, options.collection, options.overwriteModels, connections.get(options.connection));
            }
        });
    });
}
exports.Model = Model;
//# sourceMappingURL=model.js.map
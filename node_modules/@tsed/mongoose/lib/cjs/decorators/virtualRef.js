"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualRef = void 0;
const core_1 = require("@tsed/core");
const schema_1 = require("@tsed/schema");
const constants_js_1 = require("../constants/constants.js");
const MongooseModels_js_1 = require("../registries/MongooseModels.js");
function getRef(opts) {
    const ref = opts.ref;
    return (0, core_1.isString)(ref) ? ref : core_1.Store.from(ref).get(constants_js_1.MONGOOSE_MODEL_NAME);
}
function getType(opts) {
    const ref = opts.ref;
    return !(0, core_1.isString)(ref) ? ref : MongooseModels_js_1.MongooseModels.get(ref) || (() => MongooseModels_js_1.MongooseModels.get(ref) || Object);
}
function getInitialOpts(options, foreignField) {
    return (0, core_1.isPlainObject)(options) ? options : { ref: options, foreignField };
}
function mapToSchema(opts) {
    const ref = getRef(opts);
    const schema = {
        ref,
        localField: opts.localField || "_id",
        foreignField: opts.foreignField,
        justOne: opts.justOne || false,
        count: opts.count || false,
        options: opts.options
    };
    return schema;
}
function VirtualRef(options, foreignField) {
    const opts = getInitialOpts(options, foreignField);
    const schema = mapToSchema(opts);
    const type = getType(opts);
    return (0, core_1.useDecorators)((0, core_1.StoreMerge)(constants_js_1.MONGOOSE_SCHEMA, schema), schema.count ? (0, schema_1.Property)(Number) : type && (schema.justOne ? (0, schema_1.Property)(type) : (0, schema_1.CollectionOf)(type, Array)));
}
exports.VirtualRef = VirtualRef;
//# sourceMappingURL=virtualRef.js.map
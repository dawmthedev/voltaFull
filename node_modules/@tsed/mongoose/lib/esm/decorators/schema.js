import { decoratorTypeOf, StoreMerge, useDecorators } from "@tsed/core";
import { registerProvider } from "@tsed/di";
import { Property } from "@tsed/schema";
import { MONGOOSE_SCHEMA } from "../constants/constants.js";
import { getSchema, getSchemaToken } from "../utils/createSchema.js";
export function Schema(options = {}) {
    return (...parameters) => {
        switch (decoratorTypeOf(parameters)) {
            case "property":
                return useDecorators(Property(), StoreMerge(MONGOOSE_SCHEMA, options))(parameters[0], parameters[1], parameters[2]);
            case "class":
                const { token } = getSchemaToken(parameters[0], options);
                registerProvider({
                    provide: token,
                    deps: [],
                    useFactory() {
                        return getSchema(parameters[0], options);
                    }
                });
                break;
        }
    };
}
export function MongooseSchema(options = {}) {
    return Schema(options);
}
//# sourceMappingURL=schema.js.map
import { isPlainObject, isString, Store, StoreMerge, useDecorators } from "@tsed/core";
import { CollectionOf, Property } from "@tsed/schema";
import { MONGOOSE_MODEL_NAME, MONGOOSE_SCHEMA } from "../constants/constants.js";
import { MongooseModels } from "../registries/MongooseModels.js";
function getRef(opts) {
    const ref = opts.ref;
    return isString(ref) ? ref : Store.from(ref).get(MONGOOSE_MODEL_NAME);
}
function getType(opts) {
    const ref = opts.ref;
    return !isString(ref) ? ref : MongooseModels.get(ref) || (() => MongooseModels.get(ref) || Object);
}
function getInitialOpts(options, foreignField) {
    return isPlainObject(options) ? options : { ref: options, foreignField };
}
function mapToSchema(opts) {
    const ref = getRef(opts);
    const schema = {
        ref,
        localField: opts.localField || "_id",
        foreignField: opts.foreignField,
        justOne: opts.justOne || false,
        count: opts.count || false,
        options: opts.options
    };
    return schema;
}
export function VirtualRef(options, foreignField) {
    const opts = getInitialOpts(options, foreignField);
    const schema = mapToSchema(opts);
    const type = getType(opts);
    return useDecorators(StoreMerge(MONGOOSE_SCHEMA, schema), schema.count ? Property(Number) : type && (schema.justOne ? Property(type) : CollectionOf(type, Array)));
}
//# sourceMappingURL=virtualRef.js.map
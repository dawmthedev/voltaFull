import { Configuration, registerProvider } from "@tsed/di";
import { isArray } from "@tsed/core";
import { MongooseService } from "../services/MongooseService.js";
/**
 * @ignore
 */
// tslint:disable-next-line:variable-name
export const MONGOOSE_CONNECTIONS = Symbol.for("MONGOOSE_CONNECTIONS");
function mapOptions(options) {
    if (!options) {
        return [];
    }
    if (!isArray(options)) {
        const { url, connectionOptions } = options || {};
        return [
            {
                id: "default",
                url,
                connectionOptions
            }
        ];
    }
    return options.map((settings) => {
        return {
            ...settings,
            connectionOptions: settings.connectionOptions
        };
    });
}
registerProvider({
    provide: MONGOOSE_CONNECTIONS,
    injectable: false,
    deps: [Configuration, MongooseService],
    async useAsyncFactory(configuration, mongooseService) {
        const settings = mapOptions(configuration.get("mongoose"));
        let isDefault = true;
        for (const current of settings) {
            await mongooseService.connect(current.id, current.url, current.connectionOptions || {}, isDefault);
            isDefault = false;
        }
        return mongooseService;
    }
});
//# sourceMappingURL=MongooseConnections.js.map
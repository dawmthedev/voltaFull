import { __decorate, __metadata } from "tslib";
import { Inject, Injectable } from "@tsed/di";
import { Logger } from "@tsed/logger";
import Mongoose from "mongoose";
// istanbul ignore next
function asPromise(c) {
    return c && c.asPromise ? c.asPromise() : c;
}
let MongooseService = class MongooseService {
    constructor() {
        this.connections = new Map();
        this.defaultConnection = "default";
    }
    /**
     *
     * @returns {Promise<"mongoose".Connection>}
     */
    async connect(id, url, connectionOptions, isDefault = false) {
        if (this.has(id)) {
            return this.get(id);
        }
        this.logger.info(`Connect to mongo database: ${id}`);
        this.logger.debug(`Url: ${url}`);
        this.logger.debug(`options: ${JSON.stringify(connectionOptions)}`);
        try {
            const connection = await asPromise(Mongoose.createConnection(url, connectionOptions));
            this.connections.set(id, connection);
            if (id === "default" || isDefault) {
                this.defaultConnection = id;
            }
            return connection;
        }
        catch (er) {
            /* istanbul ignore next */
            this.logger.error({
                event: "MONGO_CONNECTION_ERROR",
                error_name: er.name,
                message: er.message,
                stack: er.stack
            });
            /* istanbul ignore next */
            process.exit();
        }
    }
    /**
     *
     * @returns {"mongoose".Connection}
     */
    get(id) {
        return this.connections.get(id || this.defaultConnection);
    }
    /**
     *
     * @param {string} id
     * @returns {boolean}
     */
    has(id) {
        return this.connections.has(id || this.defaultConnection);
    }
    async closeConnections() {
        for (const [id, connection] of this.connections.entries()) {
            await connection.close();
            this.connections.delete(id);
        }
    }
};
__decorate([
    Inject(),
    __metadata("design:type", Logger)
], MongooseService.prototype, "logger", void 0);
MongooseService = __decorate([
    Injectable()
], MongooseService);
export { MongooseService };
//# sourceMappingURL=MongooseService.js.map
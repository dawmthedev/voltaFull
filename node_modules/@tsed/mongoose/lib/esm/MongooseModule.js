import { __decorate, __metadata, __param } from "tslib";
import { Configuration } from "@tsed/di";
import { Module } from "@tsed/di";
import { MONGOOSE_CONNECTIONS } from "./services/MongooseConnections.js";
import { MongooseService } from "./services/MongooseService.js";
/**
 * @ignore
 */
let MongooseModule = class MongooseModule {
    constructor(mongooseService, settings) {
        this.mongooseService = mongooseService;
        this.settings = settings;
        // auto configure the cache manager when mongoose is used with @tsed/mongoose
        const cache = this.settings.get("cache");
        // istanbul ignore next
        if (cache?.mongoose) {
            cache.connection = this.mongooseService.get();
        }
    }
    $onInit() { }
    $onDestroy() {
        return this.mongooseService.closeConnections();
    }
};
MongooseModule = __decorate([
    Module({
        imports: [MONGOOSE_CONNECTIONS]
    }),
    __param(1, Configuration()),
    __metadata("design:paramtypes", [MongooseService, Object])
], MongooseModule);
export { MongooseModule };
//# sourceMappingURL=MongooseModule.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepMerge = exports.mergeReducerBuilder = void 0;
const createInstance_js_1 = require("./createInstance.js");
const isFunction_js_1 = require("./isFunction.js");
const isPrimitive_js_1 = require("./isPrimitive.js");
const isSymbol_js_1 = require("./isSymbol.js");
const objectKeys_js_1 = require("./objectKeys.js");
function mergeReducerBuilder(cb) {
    return (collection, value, options) => {
        const index = collection.findIndex((item) => cb(item, value));
        if (index === -1) {
            return [...collection, value];
        }
        collection[index] = deepMerge(collection[index], value, options);
        return collection;
    };
}
exports.mergeReducerBuilder = mergeReducerBuilder;
const defaultReducer = mergeReducerBuilder((a, b) => a === b);
function getReducer({ reducers, parentKey }) {
    if (!reducers) {
        return defaultReducer;
    }
    if (parentKey && reducers[parentKey]) {
        return reducers[parentKey];
    }
    return reducers["default"] || defaultReducer;
}
function shouldReturnObj(obj, source) {
    return (0, isPrimitive_js_1.isPrimitive)(obj) || (0, isSymbol_js_1.isSymbol)(obj) || (0, isFunction_js_1.isFunction)(obj) || source === undefined;
}
function shouldReturnSource(obj, source) {
    return obj === undefined || obj === null || (obj === "" && source !== "");
}
function deepMerge(source, obj, options = {}) {
    if (shouldReturnSource(obj, source)) {
        return source;
    }
    if (shouldReturnObj(obj, source)) {
        return obj;
    }
    if (Array.isArray(source)) {
        const reducer = getReducer(options);
        return [].concat(obj).reduce((out, value) => reducer(out, value, options), [...source]);
    }
    const newObj = (0, createInstance_js_1.createInstance)(source);
    return [...(0, objectKeys_js_1.objectKeys)(source), ...(0, objectKeys_js_1.objectKeys)(obj)].reduce((out, key) => {
        const src = source && source[key];
        const value = deepMerge(src, obj && obj[key], {
            ...options,
            parentKey: key
        });
        if (options.cleanUndefinedProps && value === undefined) {
            return out;
        }
        out[key] = options.alter?.(key, value) ?? value;
        return out;
    }, newObj);
}
exports.deepMerge = deepMerge;
//# sourceMappingURL=deepMerge.js.map
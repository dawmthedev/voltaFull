import { __decorate, __metadata } from "tslib";
import { Inject, Injectable, ProjectPackageJson, SrcRendererService } from "@tsed/cli-core";
import { camelCase, constantCase, paramCase } from "change-case";
import { basename, join } from "path";
import { TEMPLATE_DIR } from "../utils/templateDir.js";
let CliMongoose = class CliMongoose {
    projectPackageJson;
    srcRenderer;
    async writeConfig(name, options = {}) {
        await this.srcRenderer.render("config.hbs", {
            ...options,
            symbolName: constantCase(name),
            name: paramCase(name)
        }, {
            output: `${paramCase(name)}.config.ts`,
            rootDir: join(this.srcRenderer.rootDir, "config", "mongoose"),
            templateDir: TEMPLATE_DIR
        });
        return this.regenerateIndexConfig();
    }
    async regenerateIndexConfig() {
        const list = await this.srcRenderer.scan(["config/mongoose/*.config.ts"]);
        const configs = list.map((file) => {
            const name = basename(file).replace(/\.config\.ts/gi, "");
            return {
                name,
                symbolName: camelCase(name)
            };
        });
        return this.srcRenderer.render("index.hbs", {
            configs
        }, {
            templateDir: TEMPLATE_DIR,
            output: "index.ts",
            rootDir: join(this.srcRenderer.rootDir, "config", "mongoose")
        });
    }
};
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], CliMongoose.prototype, "projectPackageJson", void 0);
__decorate([
    Inject(),
    __metadata("design:type", SrcRendererService)
], CliMongoose.prototype, "srcRenderer", void 0);
CliMongoose = __decorate([
    Injectable()
], CliMongoose);
export { CliMongoose };
//# sourceMappingURL=CliMongoose.js.map
var MongooseGenerateHook_1;
import { __decorate, __metadata } from "tslib";
import { ProvidersInfoService } from "@tsed/cli";
import { CliDockerComposeYaml, Inject, OnExec, ProjectPackageJson, SrcRendererService } from "@tsed/cli-core";
import { Injectable } from "@tsed/di";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { plural } from "pluralize";
import { camelCase, paramCase } from "change-case";
import { CliMongoose } from "../services/CliMongoose.js";
import { TEMPLATE_DIR } from "../utils/templateDir.js";
let MongooseGenerateHook = MongooseGenerateHook_1 = class MongooseGenerateHook {
    providersInfoService;
    projectPackageJson;
    srcRenderService;
    cliMongoose;
    packages;
    cliDockerComposeYaml;
    constructor(providersInfoService) {
        this.providersInfoService = providersInfoService;
        providersInfoService
            .add({
            name: "Mongoose model",
            value: "mongoose:model",
            model: "{{symbolName}}.model",
            baseDir: "models"
        }, MongooseGenerateHook_1)
            .add({
            name: "Mongoose schema",
            value: "mongoose:schema",
            model: "{{symbolName}}.schema",
            baseDir: "models"
        }, MongooseGenerateHook_1)
            .add({
            name: "Mongoose connection",
            value: "mongoose:connection"
        }, MongooseGenerateHook_1);
    }
    onGenerateExec(ctx) {
        if (this.providersInfoService.isMyProvider(ctx.type, MongooseGenerateHook_1)) {
            switch (ctx.type) {
                case "mongoose:connection":
                    return this.generateConnection(ctx);
                case "mongoose:model":
                case "mongoose:schema":
                    return this.generateTemplate(ctx);
            }
        }
        return [];
    }
    generateTemplate(ctx) {
        const { symbolPath, type, symbolName } = ctx;
        const template = `mongoose.${type.split(":")[1]}.hbs`;
        const newCtx = {
            ...ctx,
            collectionName: plural(camelCase(symbolName.replace(/Schema|Model/gi, "")))
        };
        return [
            {
                title: `Generate ${ctx.type} file to '${symbolPath}.ts'`,
                task: () => this.srcRenderService.render(template, newCtx, {
                    output: `${symbolPath}.ts`,
                    templateDir: TEMPLATE_DIR
                })
            }
        ];
    }
    generateConnection(ctx) {
        return [
            {
                title: `Generate Mongoose configuration file to '${paramCase(ctx.name)}.config.ts'`,
                task: () => this.cliMongoose.writeConfig(ctx.name, ctx)
            },
            {
                title: "Generate docker-compose configuration",
                task: () => this.cliDockerComposeYaml.addDatabaseService(ctx.name, "mongodb")
            }
        ];
    }
};
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], MongooseGenerateHook.prototype, "projectPackageJson", void 0);
__decorate([
    Inject(),
    __metadata("design:type", SrcRendererService)
], MongooseGenerateHook.prototype, "srcRenderService", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliMongoose)
], MongooseGenerateHook.prototype, "cliMongoose", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliDockerComposeYaml)
], MongooseGenerateHook.prototype, "cliDockerComposeYaml", void 0);
__decorate([
    OnExec("generate"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Array)
], MongooseGenerateHook.prototype, "onGenerateExec", null);
MongooseGenerateHook = MongooseGenerateHook_1 = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [ProvidersInfoService])
], MongooseGenerateHook);
export { MongooseGenerateHook };
//# sourceMappingURL=MongooseGenerateHook.js.map
import { __decorate, __metadata } from "tslib";
import { CliDockerComposeYaml, Inject, OnExec, ProjectPackageJson, RootRendererService, SrcRendererService } from "@tsed/cli-core";
import { Injectable } from "@tsed/di";
import { CliMongoose } from "../services/CliMongoose.js";
let MongooseInitHook = class MongooseInitHook {
    cliMongoose;
    packageJson;
    rootRenderer;
    srcRenderer;
    cliDockerComposeYaml;
    onExec(ctx) {
        this.addScripts();
        this.addDependencies(ctx);
        this.addDevDependencies(ctx);
        return [
            {
                title: "Generate Mongoose configuration",
                task: () => this.cliMongoose.writeConfig("default", {
                    symbolName: "MONGOOSE_DEFAULT"
                })
            },
            {
                title: "Generate docker-compose configuration",
                task: () => this.cliDockerComposeYaml.addDatabaseService("mongodb", "mongodb")
            }
        ];
    }
    addScripts() {
        this.packageJson.addScripts({});
    }
    addDependencies(ctx) {
        this.packageJson.addDependencies({}, ctx);
    }
    addDevDependencies(ctx) {
        this.packageJson.addDevDependencies({}, ctx);
    }
};
__decorate([
    Inject(),
    __metadata("design:type", CliMongoose)
], MongooseInitHook.prototype, "cliMongoose", void 0);
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], MongooseInitHook.prototype, "packageJson", void 0);
__decorate([
    Inject(),
    __metadata("design:type", RootRendererService)
], MongooseInitHook.prototype, "rootRenderer", void 0);
__decorate([
    Inject(),
    __metadata("design:type", SrcRendererService)
], MongooseInitHook.prototype, "srcRenderer", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliDockerComposeYaml)
], MongooseInitHook.prototype, "cliDockerComposeYaml", void 0);
__decorate([
    OnExec("init"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], MongooseInitHook.prototype, "onExec", null);
MongooseInitHook = __decorate([
    Injectable()
], MongooseInitHook);
export { MongooseInitHook };
//# sourceMappingURL=MongooseInitHook.js.map
import { __decorate, __metadata } from "tslib";
import { Module, OnAdd, ProjectPackageJson } from "@tsed/cli-core";
import { Inject } from "@tsed/di";
import { MongooseGenerateHook } from "./hooks/MongooseGenerateHook.js";
import { MongooseInitHook } from "./hooks/MongooseInitHook.js";
import { CliMongoose } from "./services/CliMongoose.js";
let CliPluginMongooseModule = class CliPluginMongooseModule {
    packageJson;
    install() {
        this.packageJson.addDependencies({
            "@tsed/mongoose": this.packageJson.dependencies["@tsed/common"],
            mongoose: "latest"
        });
        this.packageJson.addDevDependencies({
            "@tsed/testing-mongoose": this.packageJson.dependencies["@tsed/common"]
        });
    }
};
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], CliPluginMongooseModule.prototype, "packageJson", void 0);
__decorate([
    OnAdd("@tsed/cli-plugin-mongoose"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CliPluginMongooseModule.prototype, "install", null);
CliPluginMongooseModule = __decorate([
    Module({
        imports: [MongooseInitHook, MongooseGenerateHook, CliMongoose]
    })
], CliPluginMongooseModule);
export { CliPluginMongooseModule };
//# sourceMappingURL=CliPluginMongooseModule.js.map
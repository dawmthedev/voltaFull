"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongooseInitHook = void 0;
const tslib_1 = require("tslib");
const cli_core_1 = require("@tsed/cli-core");
const di_1 = require("@tsed/di");
const CliMongoose_1 = require("../services/CliMongoose");
let MongooseInitHook = class MongooseInitHook {
    cliMongoose;
    packageJson;
    rootRenderer;
    srcRenderer;
    cliDockerComposeYaml;
    onExec(ctx) {
        this.addScripts();
        this.addDependencies(ctx);
        this.addDevDependencies(ctx);
        return [
            {
                title: "Generate Mongoose configuration",
                task: () => this.cliMongoose.writeConfig("default", {
                    symbolName: "MONGOOSE_DEFAULT"
                })
            },
            {
                title: "Generate docker-compose configuration",
                task: () => this.cliDockerComposeYaml.addDatabaseService("mongodb", "mongodb")
            }
        ];
    }
    addScripts() {
        this.packageJson.addScripts({});
    }
    addDependencies(ctx) {
        this.packageJson.addDependencies({}, ctx);
    }
    addDevDependencies(ctx) {
        this.packageJson.addDevDependencies({}, ctx);
    }
};
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", CliMongoose_1.CliMongoose)
], MongooseInitHook.prototype, "cliMongoose", void 0);
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.ProjectPackageJson)
], MongooseInitHook.prototype, "packageJson", void 0);
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.RootRendererService)
], MongooseInitHook.prototype, "rootRenderer", void 0);
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.SrcRendererService)
], MongooseInitHook.prototype, "srcRenderer", void 0);
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.CliDockerComposeYaml)
], MongooseInitHook.prototype, "cliDockerComposeYaml", void 0);
tslib_1.__decorate([
    (0, cli_core_1.OnExec)("init"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], MongooseInitHook.prototype, "onExec", null);
MongooseInitHook = tslib_1.__decorate([
    (0, di_1.Injectable)()
], MongooseInitHook);
exports.MongooseInitHook = MongooseInitHook;
//# sourceMappingURL=MongooseInitHook.js.map
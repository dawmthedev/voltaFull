import { Env } from "@tsed/core";
import type { ProviderScope } from "../domain/ProviderScope.js";
import type { DILoggerOptions } from "../interfaces/DILoggerOptions.js";
import type { DIResolver } from "../interfaces/DIResolver.js";
import type { ImportTokenProviderOpts } from "../interfaces/ImportTokenProviderOpts.js";
import type { TokenProvider } from "../interfaces/TokenProvider.js";
import type { TokenRoute } from "../interfaces/TokenRoute.js";
export declare class DIConfiguration {
    readonly default: Map<string, any>;
    protected map: Map<string, any>;
    constructor(initialProps?: {});
    get version(): string;
    set version(v: string);
    get rootDir(): string;
    set rootDir(value: string);
    get env(): Env;
    set env(value: Env);
    get scopes(): Record<string, ProviderScope>;
    set scopes(value: Record<string, ProviderScope>);
    get resolvers(): DIResolver[];
    set resolvers(resolvers: DIResolver[]);
    get imports(): (TokenProvider | ImportTokenProviderOpts)[];
    set imports(imports: (TokenProvider | ImportTokenProviderOpts)[]);
    get routes(): TokenRoute[];
    set routes(routes: TokenRoute[]);
    get logger(): Partial<DILoggerOptions>;
    set logger(value: Partial<DILoggerOptions>);
    get debug(): boolean;
    set debug(debug: boolean);
    /**
     *
     * @param callbackfn
     * @param thisArg
     */
    forEach(callbackfn: (value: any, index: string, map: Map<string, any>) => void, thisArg?: any): void;
    /**
     *
     * @param propertyKey
     * @param value
     */
    set(propertyKey: string | Partial<TsED.Configuration>, value?: any): this;
    setRaw(propertyKey: string, value: any): this;
    /**
     *
     * @param propertyKey
     * @param defaultValue
     * @returns {undefined|any}
     */
    get<T = any>(propertyKey: string, defaultValue?: T): T;
    /**
     *
     * @param value
     * @returns {any}
     */
    resolve(value: any): any;
    protected getRaw(propertyKey: string, defaultValue?: any): any;
}

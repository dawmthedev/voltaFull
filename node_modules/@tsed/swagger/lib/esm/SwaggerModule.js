import { __decorate, __metadata } from "tslib";
import { Configuration, Constant, Inject, InjectorService, Module, PlatformApplication } from "@tsed/common";
import { Env } from "@tsed/core";
import { normalizePath } from "@tsed/normalize-path";
import { PlatformRouter, useContextHandler } from "@tsed/platform-router";
import Fs from "fs";
import { join } from "path";
import { ROOT_DIR, SWAGGER_UI_DIST } from "./constants.js";
import { cssMiddleware } from "./middlewares/cssMiddleware.js";
import { indexMiddleware } from "./middlewares/indexMiddleware.js";
import { jsMiddleware } from "./middlewares/jsMiddleware.js";
import { redirectMiddleware } from "./middlewares/redirectMiddleware.js";
import { SwaggerService } from "./services/SwaggerService.js";
/**
 * @ignore
 */
let SwaggerModule = class SwaggerModule {
    constructor() {
        this.loaded = false;
    }
    get settings() {
        return [].concat(this.configuration.get("swagger")).filter((o) => !!o);
    }
    /**
     *
     */
    $onRoutesInit() {
        if (this.loaded) {
            return;
        }
        const urls = this.getUrls();
        this.settings.forEach((conf) => {
            const { path = "/" } = conf;
            this.app.use(path, useContextHandler(redirectMiddleware(path)));
            this.app.use(path, this.createRouter(conf, urls));
        });
        this.loaded = true;
    }
    $onReady() {
        // istanbul ignore next
        if (this.configuration.getBestHost && !this.disableRoutesSummary) {
            const host = this.configuration.getBestHost();
            const url = host.toString();
            const displayLog = (conf) => {
                const { path = "/", fileName = "swagger.json", doc } = conf;
                this.injector.logger.info(`[${doc || "default"}] Swagger JSON is available on ${url}${normalizePath(path, fileName)}`);
                this.injector.logger.info(`[${doc || "default"}] Swagger UI is available on ${url}${path}/`);
            };
            this.settings.forEach((conf) => {
                displayLog(conf);
            });
        }
        this.generateSpecFiles();
    }
    generateSpecFiles() {
        return Promise.all(this.settings.map(async (conf) => {
            const { outFile } = conf;
            if (this.env === Env.PROD || outFile) {
                const spec = await this.swaggerService.getOpenAPISpec(conf);
                if (outFile) {
                    return Fs.writeFile(outFile, JSON.stringify(spec, null, 2), { encoding: "utf8" }, () => { });
                }
            }
        }));
    }
    getUrls() {
        return this.settings.reduce((acc, conf) => {
            const { path = "/", fileName = "swagger.json", doc, hidden } = conf;
            if (!hidden) {
                acc.push({ url: normalizePath(path, fileName), name: doc || path });
            }
            return acc;
        }, []);
    }
    /**
     *
     * @param conf
     * @param urls
     */
    createRouter(conf, urls) {
        const { disableSpec = false, fileName = "swagger.json", cssPath, jsPath, viewPath = join(ROOT_DIR, "../views/index.ejs") } = conf;
        const router = new PlatformRouter(this.injector);
        if (!disableSpec) {
            router.get(normalizePath("/", fileName), useContextHandler(this.middlewareSwaggerJson(conf)));
        }
        if (viewPath) {
            if (cssPath) {
                router.get("/main.css", useContextHandler(cssMiddleware(cssPath)));
            }
            if (jsPath) {
                router.get("/main.js", useContextHandler(jsMiddleware(jsPath)));
            }
            router.get("/", useContextHandler(indexMiddleware(viewPath, { urls, ...conf })));
            router.statics("/", { root: SWAGGER_UI_DIST });
        }
        return router;
    }
    middlewareSwaggerJson(conf) {
        return async (ctx) => {
            ctx.response.status(200).body(await this.swaggerService.getOpenAPISpec(conf));
        };
    }
};
__decorate([
    Inject(),
    __metadata("design:type", InjectorService)
], SwaggerModule.prototype, "injector", void 0);
__decorate([
    Inject(),
    __metadata("design:type", PlatformApplication)
], SwaggerModule.prototype, "app", void 0);
__decorate([
    Configuration(),
    __metadata("design:type", Object)
], SwaggerModule.prototype, "configuration", void 0);
__decorate([
    Inject(),
    __metadata("design:type", SwaggerService)
], SwaggerModule.prototype, "swaggerService", void 0);
__decorate([
    Constant("env"),
    __metadata("design:type", String)
], SwaggerModule.prototype, "env", void 0);
__decorate([
    Constant("logger.disableRoutesSummary"),
    __metadata("design:type", Boolean)
], SwaggerModule.prototype, "disableRoutesSummary", void 0);
SwaggerModule = __decorate([
    Module()
], SwaggerModule);
export { SwaggerModule };
//# sourceMappingURL=SwaggerModule.js.map
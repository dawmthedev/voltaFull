import { __decorate, __metadata, __param } from "tslib";
import { InjectorService, Service } from "@tsed/common";
import * as SocketIO from "socket.io"; // tslint:disable-line: no-unused-variable
import { SocketHandlersBuilder } from "../class/SocketHandlersBuilder.js";
import { SocketProviderMetadata } from "../class/SocketProviderMetadata.js";
import { IO } from "../decorators/io.js";
/**
 *
 */
let SocketIOService = class SocketIOService {
    constructor(injector, io) {
        this.injector = injector;
        this.io = io;
        /**
         *
         * @type {Map<any, any>}
         */
        this.namespaces = new Map();
    }
    /**
     *
     * @param {string} namespace
     * @returns {SocketIO.Namespace}
     */
    getNsp(namespace = "/") {
        if (!this.namespaces.has(namespace)) {
            const conf = { nsp: this.io.of(namespace), instances: [] };
            this.namespaces.set(namespace, conf);
            conf.nsp.on("connection", (socket) => {
                conf.instances.forEach((builder) => {
                    builder.onConnection(socket, conf.nsp);
                });
                socket.on("disconnect", (reason) => {
                    conf.instances.forEach((builder) => {
                        builder.onDisconnect(socket, conf.nsp, reason);
                    });
                });
            });
        }
        return this.namespaces.get(namespace);
    }
    /**
     *
     * @param {Provider<any>} provider
     */
    addSocketProvider(provider) {
        const wsConfig = new SocketProviderMetadata(provider.store.get("socketIO"));
        const nspConfig = this.getNsp(wsConfig.namespace);
        const nsps = new Map();
        this.namespaces.forEach((value, nsp) => {
            nsps.set(nsp, value.nsp);
        });
        const builder = new SocketHandlersBuilder(provider, this.injector).build(nsps);
        nspConfig.instances.push(builder);
    }
};
SocketIOService = __decorate([
    Service(),
    __param(1, IO),
    __metadata("design:paramtypes", [InjectorService, SocketIO.Server])
], SocketIOService);
export { SocketIOService };
//# sourceMappingURL=SocketIOService.js.map
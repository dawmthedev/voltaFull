"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketHandlersBuilder = void 0;
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const json_mapper_1 = require("@tsed/json-mapper");
const logger_1 = require("@tsed/logger");
const SocketFilters_js_1 = require("../interfaces/SocketFilters.js");
const SocketProviderTypes_js_1 = require("../interfaces/SocketProviderTypes.js");
const SocketReturnsTypes_js_1 = require("../interfaces/SocketReturnsTypes.js");
const SocketProviderMetadata_js_1 = require("./SocketProviderMetadata.js");
const SocketSessionData_js_1 = require("./SocketSessionData.js");
const uuid_1 = require("uuid");
/**
 * @ignore
 */
class SocketHandlersBuilder {
    constructor(provider, injector) {
        this.provider = provider;
        this.injector = injector;
        this.socketProviderMetadata = new SocketProviderMetadata_js_1.SocketProviderMetadata(this.provider.store.get("socketIO"));
    }
    /**
     *
     * @param {SocketHandlerMetadata} handlerMetadata
     * @param scope
     * @returns {(data) => void}
     */
    static bindResponseMiddleware(handlerMetadata, scope) {
        const { returns } = handlerMetadata;
        return (response) => {
            if (returns) {
                switch (returns.type) {
                    case SocketReturnsTypes_js_1.SocketReturnsTypes.BROADCAST:
                        scope.nsp.emit(returns.eventName, response);
                        break;
                    case SocketReturnsTypes_js_1.SocketReturnsTypes.BROADCAST_OTHERS:
                        scope.socket.broadcast.emit(returns.eventName, response);
                        break;
                    case SocketReturnsTypes_js_1.SocketReturnsTypes.EMIT:
                        scope.socket.emit(returns.eventName, response);
                        break;
                }
            }
            else {
                const cb = scope.args.at(-1);
                if (cb && (0, core_1.isFunction)(cb)) {
                    cb(response);
                }
            }
        };
    }
    /**
     *
     * @returns {any}
     */
    build(nsps) {
        const instance = this.injector.get(this.provider.token);
        const { injectNamespaces, namespace } = this.socketProviderMetadata;
        const nsp = nsps.get(namespace);
        instance.$onConnection && this.socketProviderMetadata.createHook("$onConnection", "connection");
        instance.$onDisconnect && this.socketProviderMetadata.createHook("$onDisconnect", "disconnect");
        injectNamespaces.forEach((setting) => {
            instance[setting.propertyKey] = nsps.get(setting.nsp || namespace);
        });
        instance["nsp"] = nsp;
        if (instance.$onNamespaceInit) {
            instance.$onNamespaceInit(nsp);
        }
        return this;
    }
    /**
     *
     * @param {Socket} socket
     * @param {Namespace} nsp
     */
    async onConnection(socket, nsp) {
        const { socketProviderMetadata } = this;
        const instance = this.injector.get(this.provider.token);
        this.buildHandlers(socket, nsp);
        if (instance.$onConnection) {
            const ctx = this.createContext(socket, nsp);
            await (0, di_1.runInContext)(ctx, () => this.invoke(instance, socketProviderMetadata.$onConnection, { socket, nsp }), this.injector);
        }
    }
    async onDisconnect(socket, nsp, reason) {
        const instance = this.injector.get(this.provider.token);
        const { socketProviderMetadata } = this;
        if (instance.$onDisconnect) {
            const ctx = this.createContext(socket, nsp);
            await (0, di_1.runInContext)(ctx, () => this.invoke(instance, socketProviderMetadata.$onDisconnect, { socket, nsp, reason }), this.injector);
        }
    }
    buildHandlers(socket, nsp) {
        const { socketProviderMetadata } = this;
        socketProviderMetadata.getHandlers().forEach((handler) => {
            const { eventName } = handler;
            if (eventName) {
                socket.on(eventName, async (...args) => {
                    const ctx = this.createContext(socket, nsp);
                    await (0, di_1.runInContext)(ctx, () => this.runQueue(handler, args, socket, nsp), this.injector);
                });
            }
        });
    }
    runQueue(handlerMetadata, args, socket, nsp) {
        const instance = this.injector.get(this.provider.token);
        const { useBefore, useAfter } = this.socketProviderMetadata;
        const scope = {
            args,
            socket,
            nsp,
            eventName: handlerMetadata.eventName
        };
        let promise = Promise.resolve().then(() => this.deserialize(handlerMetadata, scope));
        if (useBefore) {
            useBefore.forEach((target) => (promise = this.bindMiddleware(target, scope, promise)));
        }
        if (handlerMetadata.useBefore) {
            handlerMetadata.useBefore.forEach((target) => (promise = this.bindMiddleware(target, scope, promise)));
        }
        promise = promise
            .then(() => this.invoke(instance, handlerMetadata, scope))
            .then(SocketHandlersBuilder.bindResponseMiddleware(handlerMetadata, scope));
        if (handlerMetadata.useAfter) {
            handlerMetadata.useAfter.forEach((target) => (promise = this.bindMiddleware(target, scope, promise)));
        }
        if (useAfter) {
            useAfter.forEach((target) => (promise = this.bindMiddleware(target, scope, promise)));
        }
        return promise.catch((er) => {
            /* istanbul ignore next */
            logger_1.$log.error(handlerMetadata.eventName, er);
        });
    }
    deserialize(handlerMetadata, scope) {
        const { parameters } = handlerMetadata;
        Object.keys(parameters || []).forEach((index) => {
            const { filter, useMapper, mapIndex, type, collectionType } = parameters[index];
            let value = scope.args[mapIndex];
            if (filter === SocketFilters_js_1.SocketFilters.ARGS) {
                if (useMapper && typeof value !== "function") {
                    value = (0, json_mapper_1.deserialize)(value, {
                        type,
                        collectionType,
                        useAlias: true
                    });
                }
                scope.args[mapIndex] = value;
            }
        });
    }
    bindMiddleware(target, scope, promise) {
        const instance = this.injector.get(target);
        if (instance) {
            const handlerMetadata = new SocketProviderMetadata_js_1.SocketProviderMetadata(core_1.Store.from(instance).get("socketIO"));
            if (handlerMetadata.type === SocketProviderTypes_js_1.SocketProviderTypes.MIDDLEWARE) {
                if (handlerMetadata.error) {
                    return promise.catch((error) => this.invoke(instance, handlerMetadata.useHandler, { error, ...scope }));
                }
                return promise
                    .then(() => this.invoke(instance, handlerMetadata.useHandler, scope))
                    .then((result) => {
                    if (result) {
                        scope.args = [].concat(result);
                    }
                });
            }
        }
        return promise;
    }
    invoke(instance, handlerMetadata, scope) {
        const { methodClassName, parameters } = handlerMetadata;
        return instance[methodClassName](...this.buildParameters(parameters, scope));
    }
    buildParameters(parameters, scope) {
        return Object.keys(parameters || []).map((index) => {
            const param = parameters[index];
            switch (param.filter) {
                case SocketFilters_js_1.SocketFilters.ARGS:
                    if (param.mapIndex !== undefined) {
                        return scope.args[param.mapIndex];
                    }
                    return scope.args;
                case SocketFilters_js_1.SocketFilters.EVENT_NAME:
                    return scope.eventName;
                case SocketFilters_js_1.SocketFilters.SOCKET:
                    return scope.socket;
                case SocketFilters_js_1.SocketFilters.NSP:
                    return scope.nsp;
                case SocketFilters_js_1.SocketFilters.ERR:
                    return scope.error;
                case SocketFilters_js_1.SocketFilters.SESSION:
                    return new SocketSessionData_js_1.SocketSessionData(scope.socket.data);
                case SocketFilters_js_1.SocketFilters.RAW_SESSION:
                    return scope.socket.data;
                case SocketFilters_js_1.SocketFilters.SOCKET_NSP:
                    return scope.socket.nsp;
                case SocketFilters_js_1.SocketFilters.REASON:
                    return scope.reason;
            }
        });
    }
    createContext(socket, nsp) {
        return new di_1.DIContext({
            injector: this.injector,
            id: (0, uuid_1.v4)().split("-").join(""),
            logger: this.injector.logger,
            additionalProps: {
                module: "socket.io",
                sid: socket.id,
                namespace: nsp.name
            }
        });
    }
}
exports.SocketHandlersBuilder = SocketHandlersBuilder;
//# sourceMappingURL=SocketHandlersBuilder.js.map
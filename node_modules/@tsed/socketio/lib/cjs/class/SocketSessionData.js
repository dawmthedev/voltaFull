"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketSessionData = void 0;
/**
 * Represents session data associated with a socket connection, providing a compatibility layer with Ts.ED v7 by wrapping a `socket.data` which is used to archive recoverability and resiliency to a `Map` instance.
 *
 * This class implements the `Map<string, unknown>` interface and provides methods and properties to manage and manipulate session data.
 *
 * @internal This class is designed for internal use.
 */
class SocketSessionData extends Map {
    #data;
    get size() {
        return Object.keys(this.#data).length;
    }
    static get [Symbol.species]() {
        return Map;
    }
    constructor(data) {
        super();
        this.#data = data;
    }
    *[Symbol.iterator]() {
        for (const key in this.#data) {
            yield [key, this.#data[key]];
        }
    }
    clear() {
        for (const key in this.#data) {
            delete this.#data[key];
        }
    }
    delete(key) {
        const hasKey = key in this.#data;
        if (hasKey) {
            delete this.#data[key];
            return true;
        }
        return false;
    }
    *entries() {
        for (const key in this.#data) {
            yield [key, this.#data[key]];
        }
    }
    forEach(callbackfn, thisArg) {
        for (const key in this.#data) {
            callbackfn.call(thisArg, this.#data[key], key, this);
        }
    }
    get(key) {
        return this.#data[key];
    }
    has(key) {
        return key in this.#data;
    }
    *keys() {
        for (const key in this.#data) {
            yield key;
        }
    }
    set(key, value) {
        this.#data[key] = value;
        return this;
    }
    *values() {
        for (const key in this.#data) {
            yield this.#data[key];
        }
    }
}
exports.SocketSessionData = SocketSessionData;
//# sourceMappingURL=SocketSessionData.js.map
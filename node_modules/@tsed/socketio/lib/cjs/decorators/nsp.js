"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespace = exports.Nsp = void 0;
const core_1 = require("@tsed/core");
const SocketFilters_js_1 = require("../interfaces/SocketFilters.js");
const socketFilter_js_1 = require("./socketFilter.js");
/**
 * Inject the [SocketIO.Namespace](https://socket.io/docs/rooms-and-namespaces/#namespaces) instance in the decorated parameter.
 * Note that when using dynamic namespaces, when injecting a parameter, you may want to consider using @SocketNsp instead.
 *
 * ### Example
 *
 * ```typescript
 * import {Nsp, SocketService, Input} from "@tsed/socketio";
 *
 * @SocketService("/nsp")
 * export class MyWS {
 *
 *   @Nsp
 *   nsp: SocketIO.Namespace; // will inject SocketIO.Namespace (not available on constructor)
 *
 *   @Nsp("/my-other-namespace")
 *   nspOther: SocketIO.Namespace; // communication between two namespace
 *
 *   @Nsp(/regexp/)
 *   nspDynamic: SocketIO.Namespace; // will inject a dynamic namespace (not available on constructor)
 *
 *   @Input("event")
 *   myMethod(@Nsp namespace: SocketIO.Namespace) {
 *
 *   }
 * }
 * ```
 *
 * @param target
 * @param {string} propertyKey
 * @param {number} index
 * @decorator
 */
function Nsp(target, propertyKey, index) {
    return Namespace(target, propertyKey, index);
}
exports.Nsp = Nsp;
/**
 * Inject the [SocketIO.Namespace](https://socket.io/docs/rooms-and-namespaces/#namespaces) instance in the decorated parameter.
 * Note that when using dynamic namespaces, when injecting a parameter, you may want to consider using @SocketNsp instead.
 *
 * ### Example
 *
 * ```typescript
 * import {Namespace, SocketService, Input} from "@tsed/socketio";
 *
 * @SocketService("/nsp")
 * export class MyWS {
 *
 *   @Namespace
 *   nsp: SocketIO.Namespace; // will inject SocketIO.Namespace (not available on constructor)
 *
 *   @Namespace("/my-other-namespace")
 *   nspOther: SocketIO.Namespace; // communication between two namespace
 *
 *   @Namespace(/regexp/)
 *   nspDynamic: SocketIO.Namespace; // will inject a dynamic namespace (not available on constructor)
 *
 *   @Input("event")
 *   myMethod(@Namespace namespace: Namespace) {
 *
 *   }
 * }
 * ```
 *
 * @param target
 * @param {string} propertyKey
 * @param {number} index
 * @alias {Nsp}
 * @decorator
 */
function Namespace(target, propertyKey, index) {
    if (typeof target === "string" || (0, core_1.isRegExp)(target)) {
        const nsp = target;
        return (target, propertyKey) => {
            core_1.Store.from(target).merge("socketIO", {
                injectNamespaces: [{ propertyKey, nsp }]
            });
        };
    }
    if ((0, core_1.decoratorTypeOf)([target, propertyKey, index]) === core_1.DecoratorTypes.PROP) {
        core_1.Store.from(target).merge("socketIO", {
            injectNamespaces: [{ propertyKey }]
        });
        return;
    }
    return (0, socketFilter_js_1.SocketFilter)(SocketFilters_js_1.SocketFilters.NSP)(target, propertyKey, index);
}
exports.Namespace = Namespace;
//# sourceMappingURL=nsp.js.map
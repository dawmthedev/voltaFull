"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketMiddleware = void 0;
const platform_middlewares_1 = require("@tsed/platform-middlewares");
const core_1 = require("@tsed/core");
const SocketProviderTypes_js_1 = require("../interfaces/SocketProviderTypes.js");
/**
 * Declare a new SocketMiddleware.
 *
 * ### Example
 *
 * A middleware can be also used on a `SocketService` either on a class or on a method.
 *
 * Here an example of a middleware:
 *
 * ```typescript
 * @SocketMiddleware()
 * export class UserConverterSocketMiddleware {
 *     constructor(private converterService: ConverterService) {
 *     }
 *     async use(@Args() args: any[]) {
 *
 *         let [user] = args;
 *         // update Arguments
 *         user = this.converterService.deserialize(user, User);
 *
 *         return [user];
 *     }
 * }
 * ```
 * > The user instance will be forwarded to the next middleware and to your decorated method.
 *
 * Then:
 *
 * ```typescript
 * import {SocketService, SocketUseAfter, SocketUseBefore, Emit, Input, Args} from "@tsed/socketio";
 * import {UserConverterSocketMiddleware} from "../middlewares.js";
 * import {User} from "../models/User.js";
 *
 * @SocketService("/my-namespace")
 * @SocketUseBefore(UserConverterSocketMiddleware) // global version
 * export class MySocketService {
 *
 *    @Input("eventName")
 *    @Emit("responseEventName") // or Broadcast or BroadcastOthers
 *    @SocketUseBefore(UserConverterSocketMiddleware)
 *    async myMethod(@Args(0) user: User) {
 *
 *        console.log(user);
 *
 *        return user;
 *    }
 * }
 * ```
 *
 * @returns {Function}
 * @decorator
 * @experimental
 */
function SocketMiddleware() {
    return (target) => {
        core_1.Store.from(target).merge("socketIO", {
            type: SocketProviderTypes_js_1.SocketProviderTypes.MIDDLEWARE,
            handlers: {
                use: {
                    methodClassName: "use"
                }
            }
        });
        return (0, platform_middlewares_1.Middleware)()(target);
    };
}
exports.SocketMiddleware = SocketMiddleware;
//# sourceMappingURL=socketMiddleware.js.map
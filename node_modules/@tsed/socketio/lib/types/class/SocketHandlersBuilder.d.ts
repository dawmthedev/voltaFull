import { InjectorService, Provider } from "@tsed/di";
import { Namespace, Socket } from "socket.io";
/**
 * @ignore
 */
export declare class SocketHandlersBuilder {
    private readonly provider;
    private readonly injector;
    private readonly socketProviderMetadata;
    constructor(provider: Provider, injector: InjectorService);
    /**
     *
     * @param {SocketHandlerMetadata} handlerMetadata
     * @param scope
     * @returns {(data) => void}
     */
    private static bindResponseMiddleware;
    /**
     *
     * @returns {any}
     */
    build(nsps: Map<string | RegExp, Namespace>): this;
    /**
     *
     * @param {Socket} socket
     * @param {Namespace} nsp
     */
    onConnection(socket: Socket, nsp: Namespace): Promise<void>;
    onDisconnect(socket: Socket, nsp: Namespace, reason?: string): Promise<void>;
    private buildHandlers;
    private runQueue;
    private deserialize;
    private bindMiddleware;
    private invoke;
    private buildParameters;
    private createContext;
}

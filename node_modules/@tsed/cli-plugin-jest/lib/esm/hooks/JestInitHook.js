import { __decorate, __metadata } from "tslib";
import { Inject, Injectable, OnExec, ProjectPackageJson, RootRendererService, ScriptsRendererService, SrcRendererService } from "@tsed/cli-core";
import { TEMPLATE_DIR } from "../utils/templateDir.js";
let JestInitHook = class JestInitHook {
    packageJson;
    srcRenderer;
    rootRenderer;
    scriptsRenderer;
    onInitExec() {
        return [
            {
                title: "Generate files for jest",
                task: (ctx) => {
                    return this.rootRenderer.renderAll(["jest.config.js.hbs"], ctx, {
                        templateDir: `${TEMPLATE_DIR}/init`
                    });
                }
            }
        ];
    }
};
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], JestInitHook.prototype, "packageJson", void 0);
__decorate([
    Inject(),
    __metadata("design:type", SrcRendererService)
], JestInitHook.prototype, "srcRenderer", void 0);
__decorate([
    Inject(),
    __metadata("design:type", RootRendererService)
], JestInitHook.prototype, "rootRenderer", void 0);
__decorate([
    Inject(),
    __metadata("design:type", ScriptsRendererService)
], JestInitHook.prototype, "scriptsRenderer", void 0);
__decorate([
    OnExec("init"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], JestInitHook.prototype, "onInitExec", null);
JestInitHook = __decorate([
    Injectable()
], JestInitHook);
export { JestInitHook };
//# sourceMappingURL=JestInitHook.js.map
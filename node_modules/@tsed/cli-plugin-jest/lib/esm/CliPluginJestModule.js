import { __decorate, __metadata } from "tslib";
import { Module, OnAdd, ProjectPackageJson } from "@tsed/cli-core";
import { Inject } from "@tsed/di";
import { JestGenerateHook } from "./hooks/JestGenerateHook.js";
import { JestInitHook } from "./hooks/JestInitHook.js";
let CliPluginJestModule = class CliPluginJestModule {
    packageJson;
    install() {
        this.addScripts();
        this.addDevDependencies();
    }
    addScripts() {
        const runner = this.packageJson.getRunCmd();
        this.packageJson.addScripts({
            test: `${runner} test:lint && ${runner} test:coverage`,
            "test:unit": "cross-env NODE_ENV=test jest",
            "test:coverage": `${runner} test:unit`
        });
    }
    addDevDependencies() {
        this.packageJson.addDevDependencies({
            "@types/jest": "latest",
            jest: "latest",
            "ts-jest": "latest"
        });
    }
};
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], CliPluginJestModule.prototype, "packageJson", void 0);
__decorate([
    OnAdd("@tsed/cli-plugin-jest"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CliPluginJestModule.prototype, "install", null);
CliPluginJestModule = __decorate([
    Module({
        imports: [JestInitHook, JestGenerateHook]
    })
], CliPluginJestModule);
export { CliPluginJestModule };
//# sourceMappingURL=CliPluginJestModule.js.map